import org.gradle.api.artifacts.maven.MavenDeployment

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    project_group = 'com.github.rholder'
    project_version = '2.0.0'
    project_jdk = '1.6'
    project_pom = {
        name 'guava-retrying'
        packaging 'jar'
        description "This is a small extension to Google's Guava library to allow for the creation of configurable retrying strategies for an arbitrary function call, such as something that talks to a remote service with flaky uptime."
        url 'http://rholder.github.com'

        scm {
            url 'scm:git@github.com:rholder/guava-retrying.git'
            connection 'scm:git@github.com:rholder/guava-retrying.git'
            developerConnection 'scm:git@github.com:rholder/guava-retrying.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rholder'
                name 'Ray Holder'
            }
        }
    }

    /** Function always returns a new manifest that can be customized */
    defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()
            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Identifiers

group = project_group
version = project_version
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Plugins

apply plugin: 'java'
sourceCompatibility = project_jdk
targetCompatibility = project_jdk

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:20.0'
    compile 'com.google.code.findbugs:jsr305:2.0.2'

    // junit testing
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Artifacts

jar {
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    doFirst {
        // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
        manifest = defaultManifest()
    }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publishing

def promptPasswords() {
    def console = System.console()
    if (console == null) {
        throw new RuntimeException("Console is not available. Try running from a terminal or with --no-daemon")
    }

    def sonatypeOssPassword = console.readPassword("\nEnter Sonatype password: ")
    sonatypeOssPassword = new String(sonatypeOssPassword)
    if (sonatypeOssPassword.size() <= 0) {
        throw new InvalidUserDataException("Empty Sonatype password")
    }

    def signingKeyPassword = console.readPassword("\nEnter signing key password: ")
    signingKeyPassword = new String(signingKeyPassword)
    if (signingKeyPassword.size() <= 0) {
        throw new InvalidUserDataException("Empty signing key password")
    }

    // set passwords globally for access elsewhere
    allprojects { ext."signing.password" = signingKeyPassword }
    allprojects { ext."sonatypePassword" = sonatypeOssPassword }

}

if(isReleaseVersion && gradle.startParameter.taskNames.contains("uploadArchives")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
        if (gradle.startParameter.taskNames.contains("uploadArchives")) {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // for snapshots https://oss.sonatype.org/content/repositories/snapshots
                // for staging/release https://oss.sonatype.org/service/local/staging/deploy/maven2
                repository(
                        url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                ) {
                    promptPasswords()
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project project_pom
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Utilities

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDE

idea {
    module {
        downloadSources = true
    }
    project {
        languageLevel = project_jdk
        vcs = 'Git'
    }
}